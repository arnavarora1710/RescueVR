'use client'
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// react/index.ts
var react_exports = {};
__export(react_exports, {
  useChat: () => useChat,
  useCompletion: () => useCompletion
});
module.exports = __toCommonJS(react_exports);

// react/use-chat.ts
var import_react = require("react");
var import_swr = __toESM(require("swr"));

// shared/utils.ts
var import_non_secure = require("nanoid/non-secure");
var nanoid = (0, import_non_secure.customAlphabet)(
  "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
  7
);
function createChunkDecoder() {
  const decoder = new TextDecoder();
  return function(chunk) {
    if (!chunk)
      return "";
    return decoder.decode(chunk, { stream: true });
  };
}

// react/use-chat.ts
var getStreamedResponse = async (api, chatRequest, mutate, extraMetadataRef, messagesRef, abortControllerRef, onFinish, onResponse, sendExtraMessageFields) => {
  var _a, _b;
  const previousMessages = messagesRef.current;
  mutate(chatRequest.messages, false);
  const res = await fetch(api, {
    method: "POST",
    body: JSON.stringify({
      messages: sendExtraMessageFields ? chatRequest.messages : chatRequest.messages.map(
        ({ role, content, name, function_call }) => ({
          role,
          content,
          ...name !== void 0 && { name },
          ...function_call !== void 0 && {
            function_call
          }
        })
      ),
      ...extraMetadataRef.current.body,
      ...(_a = chatRequest.options) == null ? void 0 : _a.body,
      ...chatRequest.functions !== void 0 && {
        functions: chatRequest.functions
      },
      ...chatRequest.function_call !== void 0 && {
        function_call: chatRequest.function_call
      }
    }),
    credentials: extraMetadataRef.current.credentials,
    headers: {
      ...extraMetadataRef.current.headers,
      ...(_b = chatRequest.options) == null ? void 0 : _b.headers
    },
    ...abortControllerRef.current !== null && {
      signal: abortControllerRef.current.signal
    }
  }).catch((err) => {
    mutate(previousMessages, false);
    throw err;
  });
  if (onResponse) {
    try {
      await onResponse(res);
    } catch (err) {
      throw err;
    }
  }
  if (!res.ok) {
    mutate(previousMessages, false);
    throw new Error(await res.text() || "Failed to fetch the chat response.");
  }
  if (!res.body) {
    throw new Error("The response body is empty.");
  }
  let streamedResponse = "";
  const createdAt = /* @__PURE__ */ new Date();
  const replyId = nanoid();
  const reader = res.body.getReader();
  const decode = createChunkDecoder();
  let responseMessage = {
    id: replyId,
    createdAt,
    content: "",
    role: "assistant"
  };
  while (true) {
    const { done, value } = await reader.read();
    if (done) {
      break;
    }
    streamedResponse += decode(value);
    if (streamedResponse.startsWith('{"function_call":')) {
      responseMessage["function_call"] = streamedResponse;
    } else {
      responseMessage["content"] = streamedResponse;
    }
    mutate([...chatRequest.messages, { ...responseMessage }], false);
    if (abortControllerRef.current === null) {
      reader.cancel();
      break;
    }
  }
  if (streamedResponse.startsWith('{"function_call":')) {
    const parsedFunctionCall = JSON.parse(streamedResponse).function_call;
    responseMessage["function_call"] = parsedFunctionCall;
    mutate([...chatRequest.messages, { ...responseMessage }]);
  }
  if (onFinish) {
    onFinish(responseMessage);
  }
  return responseMessage;
};
function useChat({
  api = "/api/chat",
  id,
  initialMessages = [],
  initialInput = "",
  sendExtraMessageFields,
  experimental_onFunctionCall,
  onResponse,
  onFinish,
  onError,
  credentials,
  headers,
  body
} = {}) {
  const hookId = (0, import_react.useId)();
  const chatId = id || hookId;
  const { data, mutate } = (0, import_swr.default)([api, chatId], null, {
    fallbackData: initialMessages
  });
  const { data: isLoading = false, mutate: mutateLoading } = (0, import_swr.default)(
    [chatId, "loading"],
    null
  );
  const messages = data;
  const messagesRef = (0, import_react.useRef)(messages);
  (0, import_react.useEffect)(() => {
    messagesRef.current = messages;
  }, [messages]);
  const abortControllerRef = (0, import_react.useRef)(null);
  const extraMetadataRef = (0, import_react.useRef)({
    credentials,
    headers,
    body
  });
  (0, import_react.useEffect)(() => {
    extraMetadataRef.current = {
      credentials,
      headers,
      body
    };
  }, [credentials, headers, body]);
  const [error, setError] = (0, import_react.useState)();
  async function triggerRequest(chatRequest) {
    try {
      mutateLoading(true);
      const abortController = new AbortController();
      abortControllerRef.current = abortController;
      while (true) {
        const streamedResponseMessage = await getStreamedResponse(
          api,
          chatRequest,
          mutate,
          extraMetadataRef,
          messagesRef,
          abortControllerRef,
          onFinish,
          onResponse,
          sendExtraMessageFields
        );
        if (streamedResponseMessage.function_call === void 0 || typeof streamedResponseMessage.function_call === "string") {
          break;
        }
        if (experimental_onFunctionCall) {
          const functionCall = streamedResponseMessage.function_call;
          const functionCallResponse = await experimental_onFunctionCall(messagesRef.current, functionCall);
          if (functionCallResponse === void 0)
            break;
          chatRequest = functionCallResponse;
        }
      }
      abortControllerRef.current = null;
      return null;
    } catch (err) {
      if (err.name === "AbortError") {
        abortControllerRef.current = null;
        return null;
      }
      if (onError && err instanceof Error) {
        onError(err);
      }
      setError(err);
    } finally {
      mutateLoading(false);
    }
  }
  const append = (0, import_react.useCallback)(
    async (message, { options, functions, function_call } = {}) => {
      if (!message.id) {
        message.id = nanoid();
      }
      const chatRequest = {
        messages: messagesRef.current.concat(message),
        options,
        ...functions !== void 0 && { functions },
        ...function_call !== void 0 && { function_call }
      };
      return triggerRequest(chatRequest);
    },
    [triggerRequest]
  );
  const reload = (0, import_react.useCallback)(
    async ({ options, functions, function_call } = {}) => {
      if (messagesRef.current.length === 0)
        return null;
      const lastMessage = messagesRef.current[messagesRef.current.length - 1];
      if (lastMessage.role === "assistant") {
        const chatRequest2 = {
          messages: messagesRef.current.slice(0, -1),
          options,
          ...functions !== void 0 && { functions },
          ...function_call !== void 0 && { function_call }
        };
        return triggerRequest(chatRequest2);
      }
      const chatRequest = {
        messages: messagesRef.current,
        options,
        ...functions !== void 0 && { functions },
        ...function_call !== void 0 && { function_call }
      };
      return triggerRequest(chatRequest);
    },
    [triggerRequest]
  );
  const stop = (0, import_react.useCallback)(() => {
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
      abortControllerRef.current = null;
    }
  }, []);
  const setMessages = (0, import_react.useCallback)(
    (messages2) => {
      mutate(messages2, false);
      messagesRef.current = messages2;
    },
    [mutate]
  );
  const [input, setInput] = (0, import_react.useState)(initialInput);
  const handleSubmit = (0, import_react.useCallback)(
    (e, { options, functions, function_call } = {}, metadata) => {
      if (metadata) {
        extraMetadataRef.current = {
          ...extraMetadataRef.current,
          ...metadata
        };
      }
      e.preventDefault();
      if (!input)
        return;
      append(
        {
          content: input,
          role: "user",
          createdAt: /* @__PURE__ */ new Date()
        },
        { options, functions, function_call }
      );
      setInput("");
    },
    [input, append]
  );
  const handleInputChange = (e) => {
    setInput(e.target.value);
  };
  return {
    messages,
    error,
    append,
    reload,
    stop,
    setMessages,
    input,
    setInput,
    handleInputChange,
    handleSubmit,
    isLoading
  };
}

// react/use-completion.ts
var import_react2 = require("react");
var import_swr2 = __toESM(require("swr"));
function useCompletion({
  api = "/api/completion",
  id,
  initialCompletion = "",
  initialInput = "",
  credentials,
  headers,
  body,
  onResponse,
  onFinish,
  onError
} = {}) {
  const hookId = (0, import_react2.useId)();
  const completionId = id || hookId;
  const { data, mutate } = (0, import_swr2.default)([api, completionId], null, {
    fallbackData: initialCompletion
  });
  const { data: isLoading = false, mutate: mutateLoading } = (0, import_swr2.default)(
    [completionId, "loading"],
    null
  );
  const [error, setError] = (0, import_react2.useState)(void 0);
  const completion = data;
  const [abortController, setAbortController] = (0, import_react2.useState)(null);
  const extraMetadataRef = (0, import_react2.useRef)({
    credentials,
    headers,
    body
  });
  (0, import_react2.useEffect)(() => {
    extraMetadataRef.current = {
      credentials,
      headers,
      body
    };
  }, [credentials, headers, body]);
  async function triggerRequest(prompt, options) {
    try {
      mutateLoading(true);
      const abortController2 = new AbortController();
      setAbortController(abortController2);
      mutate("", false);
      const res = await fetch(api, {
        method: "POST",
        body: JSON.stringify({
          prompt,
          ...extraMetadataRef.current.body,
          ...options == null ? void 0 : options.body
        }),
        credentials: extraMetadataRef.current.credentials,
        headers: {
          ...extraMetadataRef.current.headers,
          ...options == null ? void 0 : options.headers
        },
        signal: abortController2.signal
      }).catch((err) => {
        throw err;
      });
      if (onResponse) {
        try {
          await onResponse(res);
        } catch (err) {
          throw err;
        }
      }
      if (!res.ok) {
        throw new Error(
          await res.text() || "Failed to fetch the chat response."
        );
      }
      if (!res.body) {
        throw new Error("The response body is empty.");
      }
      let result = "";
      const reader = res.body.getReader();
      const decoder = createChunkDecoder();
      while (true) {
        const { done, value } = await reader.read();
        if (done) {
          break;
        }
        result += decoder(value);
        mutate(result, false);
        if (abortController2 === null) {
          reader.cancel();
          break;
        }
      }
      if (onFinish) {
        onFinish(prompt, result);
      }
      setAbortController(null);
      return result;
    } catch (err) {
      if (err.name === "AbortError") {
        setAbortController(null);
        return null;
      }
      if (err instanceof Error) {
        if (onError) {
          onError(err);
        }
      }
      setError(err);
    } finally {
      mutateLoading(false);
    }
  }
  const stop = (0, import_react2.useCallback)(() => {
    if (abortController) {
      abortController.abort();
      setAbortController(null);
    }
  }, [abortController]);
  const setCompletion = (0, import_react2.useCallback)(
    (completion2) => {
      mutate(completion2, false);
    },
    [mutate]
  );
  const complete = (0, import_react2.useCallback)(
    async (prompt, options) => {
      return triggerRequest(prompt, options);
    },
    [triggerRequest]
  );
  const [input, setInput] = (0, import_react2.useState)(initialInput);
  const handleSubmit = (0, import_react2.useCallback)(
    (e) => {
      e.preventDefault();
      if (!input)
        return;
      return complete(input);
    },
    [input, complete]
  );
  const handleInputChange = (e) => {
    setInput(e.target.value);
  };
  return {
    completion,
    complete,
    error,
    setCompletion,
    stop,
    input,
    setInput,
    handleInputChange,
    handleSubmit,
    isLoading
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useChat,
  useCompletion
});
